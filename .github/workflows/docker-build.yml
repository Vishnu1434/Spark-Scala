name: Build and Push Spark Scala App

on:
  push:
    branches:
      - main
  workflow_dispatch:   # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # required to publish to GHCR

    steps:
      # Checkout repo
      - name: Checkout source
        uses: actions/checkout@v4

      # Setup JDK 8 (needed for Spark 3.2.x)
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Cache Gradle
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build fat JAR
      - name: Build shadowJar
        run: ./gradlew shadowJar

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      # Build Docker image
      - name: Build Docker image
        run: |
          # Get the branch name from the GitHub reference and sanitize it
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/-/g')

          # Define the repository name in lowercase
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

          # Construct the image name with the dynamic branch tag
          IMAGE_NAME=ghcr.io/$REPO_LC:$BRANCH_NAME

          # Build the Docker image with the new tag
          docker build -t $IMAGE_NAME .

          # Store the image name for the next step (e.g., Push Docker image)
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # Push Docker image
      - name: Push Docker image
        run: docker push $IMAGE_NAME
